
public class Solution {

	public static long countWaysToMakeChange(int denominations[], int value){
       // Space optimization using 1D array.(most optimal solution)
        int n=denominations.length; 
        long dp[][]=new long[n][value+1];
        long pre[]=new long[value+1];
        long curr[]=new long[value+1];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<=value;j++) dp[i][j]=0;
        }
        for(int v=0;v<=value;v++){
            if(v % denominations[0]==0) pre[v]=1;
        }
        for(int i=1;i<n;i++)
        {
            for(int k=0;k<=value;k++)
            {
                long no=pre[k];
                long ta=0;
         if(denominations[i]<=k)  ta=pre[k-denominations[i]];
          pre[k]=no+ta;
            }
        }
        
         return pre[value];
	}
    // recursive and memoization soltution....
    public static long ways(int i,int arr[],int t,long [][] dp)
    {
        if(i==0)
        {
            if(arr[0]==t) return 1;
        }
        if(t==0) return 1;
        if(i<0)  return 0;
        if(dp[i][t]!=-1) return dp[i][t];
        long n=ways(i-1,arr,t,dp);
        long ta=0;
        if(arr[i]<=t)  ta=ways(i,arr,t-arr[i],dp);
        return dp[i][t]=n+ta;
    }
	
}