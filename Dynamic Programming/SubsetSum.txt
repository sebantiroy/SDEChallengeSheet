public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        // Write your code here.
        int [][] dp=new int[n][k+1];
        int [] pre=new int[k+1];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<=k;j++)dp[i][j]=0; 
        }
   
            pre[0]=1;
        
        if(arr[0]<=k)
             pre[arr[0]]=1;
        for(int ind=1;ind<n;ind++)
        {
            int curr[]=new int[k+1];
            curr[0]=1;
            for(int j=1;j<=k;j++)
            {
               // System.out.println(ind);
                int nt=pre[j];
                int t=0;
             if(arr[ind]<=j) t=pre[j-arr[ind]];
             curr[j] = Math.max(t,nt);
            }
            pre=curr;
        }   
        return pre[k]==1?true:false;
    }
    public static int ways(int ind,int arr[],int k,int [][] dp)
    {
        if(k==0) return 1;
        if(ind==0)
        {
            return arr[0]==k? 1:0;
        }
        if(dp[ind][k]!=-1) return dp[ind][k];
         int nt=ways(ind-1,arr,k,dp);
         int t=0;
        if(arr[ind]<=k) t=ways(ind-1,arr,k-arr[ind],dp);
        return dp[ind][k] = Math.max(t,nt);
    }
}
