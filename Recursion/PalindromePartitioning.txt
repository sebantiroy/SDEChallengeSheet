import java.util.*;
public class Solution {
    public static List<List<String>> partition(String s) {
        // Write your code here.
        List<List<String>> ans=new ArrayList<>();
        List<String> path=new ArrayList<>();
        fun(s,0,ans,path);
        return ans;
        
    }
    public static void fun(String s,int index,List<List<String>> ans, List<String> path)
    {
        if(index==s.length())
        {
            ans.add(new ArrayList<>(path));
            return;
        }
        for(int i=index;i<s.length();i++)
        {
            if(isPalindrome(s,index,i))
            {
                path.add(s.substring(index,i+1));
                fun(s,i+1,ans,path);
                path.remove(path.size()-1);
            }
        }
    }
    public static boolean isPalindrome(String s,int start,int end)
    {
        while(start<=end)
        {
            if(s.charAt(start++)!=s.charAt(end--))
                return false;
        }
        return true;
    }
}


1 2 4 4 5  1 2 3 4 5


1 2 3 4 4 6 1 2 3 4 5 6
 5 2 3 6 1 6     1 2 3 4 5 6             4 6     1 0 0
                                                 1     0 1 0 
                                                          1 1 0                     0 0 1
                                                          0 1 0
 
0 1 0
1 0 0
1 1 0
0 1 0





2 3 6 2 3 6
1 4 4 1 4 


100  
100