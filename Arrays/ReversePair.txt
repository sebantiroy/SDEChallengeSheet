class Solution {
    public int reversePairs(int[] nums) {
        int n=nums.length;
        int temp[]=new int[n];
        return mergeSort(0,n-1,nums,temp);
    }
    public static int mergeSort(int left,int right,int arr[],int temp[])
    {
        int cnt=0;
        if(left<right)
        {

            int mid=(left+right)/2;
            cnt=mergeSort(left,mid,arr,temp);
            cnt+=mergeSort(mid+1,right,arr,temp);
           cnt+= merge(left,right,mid+1,arr,temp);
            
        }
        return cnt;
    }
    public static int merge(int left,int right,int mid,int[] arr,int [] temp)
    {
        int i=left;
        int j=mid;
        int k=left;
        int cnt=0;
        int p=mid;
        for(int q=left;q<mid;q++)
        {
            while(p<=right && arr[q]>(2*(long)arr[p]))
                p++;
            cnt+=p-mid;
        }
        while(i<mid && j<=right)
        {
            if(arr[i]<arr[j]) 
            {
                temp[k++]=arr[i++];
            }
            else temp[k++]=arr[j++];
        }
        
        while(i<=mid-1) {
            temp[k]=arr[i];
            k++;
            i++;
            
        }
            
        while(j<=right) temp[k++]=arr[j++];
        for(int m=left;m<=right;m++) arr[m]=temp[m];
        return cnt;
    }
}